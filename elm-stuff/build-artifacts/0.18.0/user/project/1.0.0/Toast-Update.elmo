var _user$project$Toast_Update$setPendDelete = function (toast) {
	var _p0 = toast;
	if (_p0.ctor === 'Just') {
		var newToast = _elm_lang$core$Native_Utils.update(
			_p0._0,
			{pendingDelete: true});
		return _elm_lang$core$Maybe$Just(newToast);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Toast_Update$deleteToastCmd = function (toastId) {
	return A2(
		_elm_lang$core$Task$perform,
		_user$project$Toast_Types$DeleteToast(toastId),
		_elm_lang$core$Process$sleep(200));
};
var _user$project$Toast_Update$fadeOutToastCmd = function (toastId) {
	return A2(
		_elm_lang$core$Task$perform,
		_user$project$Toast_Types$FadeOutToast(toastId),
		_elm_lang$core$Process$sleep(3000));
};
var _user$project$Toast_Update$restartTasks = function (toasts) {
	return A2(
		_elm_lang$core$List$map,
		function (_p1) {
			var _p2 = _p1;
			return _user$project$Toast_Update$fadeOutToastCmd(_p2._0);
		},
		_elm_lang$core$Dict$toList(toasts));
};
var _user$project$Toast_Update$setHovering = F2(
	function (model, bool) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{hovering: bool});
	});
var _user$project$Toast_Update$update = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'AddToast':
				var _p4 = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Toast_Types$toastDecoder, _p3._0);
				if (_p4.ctor === 'Err') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var toastCount = model.toastCount + 1;
					var toastId = toastCount;
					var toast = _user$project$Toast_Types$liftToast(_p4._0);
					var toasts = A3(_elm_lang$core$Dict$insert, toastId, toast, model.toasts);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{toasts: toasts, toastCount: toastCount}),
						_1: _user$project$Toast_Update$fadeOutToastCmd(toastId)
					};
				}
			case 'ClickToast':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'FadeOutToast':
				var _p6 = _p3._0;
				var _p5 = model.hovering;
				if (_p5 === true) {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var toasts = A3(_elm_lang$core$Dict$update, _p6, _user$project$Toast_Update$setPendDelete, model.toasts);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{toasts: toasts}),
						_1: _user$project$Toast_Update$deleteToastCmd(_p6)
					};
				}
			case 'DeleteToast':
				var toasts = A2(_elm_lang$core$Dict$remove, _p3._0, model.toasts);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{toasts: toasts}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'HoverToasts':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Toast_Update$setHovering, model, true),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Toast_Update$setHovering, model, false),
					_1: _elm_lang$core$Platform_Cmd$batch(
						_user$project$Toast_Update$restartTasks(model.toasts))
				};
		}
	});
