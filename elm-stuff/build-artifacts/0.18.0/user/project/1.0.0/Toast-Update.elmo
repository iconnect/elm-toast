var _user$project$Toast_Update$changeClass = F2(
	function (newToast, toast) {
		return _elm_lang$core$Native_Utils.eq(newToast, toast) ? _elm_lang$core$Native_Utils.update(
			toast,
			{pendingDelete: true}) : toast;
	});
var _user$project$Toast_Update$deleteToast = function (toast) {
	return A2(
		_elm_lang$core$Task$perform,
		_user$project$Toast_Types$DeleteToast(toast),
		_elm_lang$core$Process$sleep(5000));
};
var _user$project$Toast_Update$fadeOutToast = function (toast) {
	return A2(
		_elm_lang$core$Task$perform,
		_user$project$Toast_Types$FadeOutToast(toast),
		_elm_lang$core$Process$sleep(4800));
};
var _user$project$Toast_Update$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'AddToast':
				var expiresAt = model.currentTime + (5 * _elm_lang$core$Time$second);
				var newToast = _elm_lang$core$Native_Utils.update(
					_p0._0,
					{expires: expiresAt});
				var newToasts = A2(
					_elm_lang$core$Basics_ops['++'],
					model.toasts,
					{
						ctor: '::',
						_0: newToast,
						_1: {ctor: '[]'}
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{toasts: newToasts}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						{
							ctor: '::',
							_0: _user$project$Toast_Update$fadeOutToast(newToast),
							_1: {
								ctor: '::',
								_0: _user$project$Toast_Update$deleteToast(newToast),
								_1: {ctor: '[]'}
							}
						})
				};
			case 'ClickToast':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Tick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentTime: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FadeOutToast':
				var newToasts = A2(
					_elm_lang$core$List$map,
					_user$project$Toast_Update$changeClass(_p0._0),
					model.toasts);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{toasts: newToasts}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var newToasts = A2(
					_elm_lang$core$List$filter,
					function (t) {
						return !_elm_lang$core$Native_Utils.eq(t.expires, _p0._0.expires);
					},
					model.toasts);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{toasts: newToasts}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
